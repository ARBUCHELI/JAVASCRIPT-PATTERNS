# 1. INTRODUCTION
-----------------

* What is a pattern?
--------------------
A general, reusable solution to a commonly occurring problem within a given context in software design.

			* SIMPLY A WAY TO RESOLVE PROBLEMS IN CODE.


* Types Explored
----------------
. Creational - create new things.

. Structural - structure your code.

. Behavioral - use for behaviors in code.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Setting up your base project
------------------------------
We use the Live Server VS extension for this.

. control + shift + p 
. Type live server
. Select Open with live server

index.html
----------
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Design Patterns</title>
</head>
<body>
    <script src="index.js"></script>
</body>
</html>

index.js
--------
console.log('Hello!');

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Functions as first-class citizens
-----------------------------------
This means that we can use functions everywhere as variables or something that we can return from another function.

index.js
--------
//console.log('Hello!');

const calc = () => {
    return 4 * 3;
}

let aNumber = calc();

console.log(aNumber);

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* What is a callback and its role?
----------------------------------

A callback function is a function that is called inside of another function.

index.js
--------
//console.log('Hello!');

const calc = () => {
    //return 4 * 3;
    return 4 * 4;
}

const printCalc = (callback) => {
    console.log(callback());
}

printCalc(calc);

































