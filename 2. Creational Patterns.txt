# 2. CREATIONAL PATTERNS
------------------------

* What are creational patterns?
-------------------------------

* Creational Patterns
---------------------
. Control the creation process of an object.

. Applicable to many languages.

. Patterns explored: classes, constructor, singleton, factory, and abstract factory.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Class design pattern
----------------------
The prototype class pattern allows us to define a blueprint for a specific type or item, and then reuse it by creating a new object from that class.

index.js
--------
/* 1. iNTRODUCTION 
//console.log('Hello!');

const calc = () => {
    //return 4 * 3;
    return 4 * 4;
}

const printCalc = (callback) => {
    console.log(callback());
}

printCalc(calc);
*/

/*2. CREATIONAL PATTERNS */
class Car {
    constructor(doors, engine, color) {
        this.doors = doors;
        this.engine = engine;
        this.color = color;
    }
}

const civic = new Car(4, 'V6', 'grey');

console.log(civic);

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Constructor pattern
---------------------
Similar to the class prototype pattern, the constructor pattern is one step further from the class pattern where we leverage a class created to create and extended class from it.

When you want to create multiple sub-categories of a class, the constructor pattern is a great way to do it.

index.js
--------
/* 1. iNTRODUCTION 
//console.log('Hello!');

const calc = () => {
    //return 4 * 3;
    return 4 * 4;
}

const printCalc = (callback) => {
    console.log(callback());
}

printCalc(calc);
*/

/*2. CREATIONAL PATTERNS */
class Car {
    constructor(doors, engine, color) {
        this.doors = doors;
        this.engine = engine;
        this.color = color;
    }
}

class SUV extends Car {
    constructor(doors, engine, color) {
        super(doors, engine, color);
        this.wheels = 4; //The default value is 4
    }
}

const civic = new Car(4, 'V6', 'grey');
console.log(civic);

const cx5 = new SUV(4, 'V8', 'red');
console.log(cx5);

------------------------------------------------------------------------------------------------------------------------------------------------------------------
































